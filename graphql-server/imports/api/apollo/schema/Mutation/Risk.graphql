type RiskPayload {
  risk: Risk
}

input CreateRiskInput {
  organizationId: ID!
  title: String!
  description: String
  originatorId: ID!
  ownerId: ID!
  magnitude: String!
  typeId: ID!
  standardsIds: [ID]
  goalId: ID
}

input DeleteRiskInput {
  _id: ID!
}

input LinkStandardToRiskInput {
  _id: ID!
  standardId: ID!
}

input UnlinkStandardFromRiskInput {
  _id: ID!
  standardId: ID!
}

input CompleteRiskAnalysisInput {
  _id: ID!
  completionComments: String
}

input UndoRiskAnalysisCompletionInput {
  _id: ID!
}

input UpdateRiskInput {
  _id: ID!
  title: String
  description: String
  statusComment: String
  standardsIds: [ID]
  departmentsIds: [ID]
  projectIds: [ID]
  originatorId: ID
  ownerId: ID
  typeId: ID
  analysis: UpdateRiskAnalysisInput
}

input UpdateRiskAnalysisInput {
  targetDate: DateTime
  executor: ID
  completionComments: String
  completedAt: DateTime
  completedBy: ID
  assignedBy: ID
}

type Mutation {
  createRisk(input: CreateRiskInput!): RiskPayload
  deleteRisk(input: DeleteRiskInput!): RiskPayload
  linkStandardToRisk(input: LinkStandardToRiskInput!): Risk
  unlinkStandardFromRisk(input: UnlinkStandardFromRiskInput!): Risk
  completeRiskAnalysis(input: CompleteRiskAnalysisInput!): Risk
  undoRiskAnalysisCompletion(input: UndoRiskAnalysisCompletionInput!): Risk
  updateRisk(input: UpdateRiskInput!): Risk
}
